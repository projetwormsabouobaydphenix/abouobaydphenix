// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <vector>
#include <stack>
#include <memory>

namespace engine {
  class Command;
};
namespace state {
  class State;
};
namespace engine {
  class Action;
}

#include "state/State.h"
#include "Action.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Attributes
  public:
    std::vector<Command*> currentCommands;
  private:
    state::State currentState;
    // Operations
  public:
    Engine ();
    ~Engine ();
     state::State& getState ();
    void addPassiveCommand ();
    void addCommand (int priority, Command* cmd);
    std::stack<std::shared_ptr<Action>>& update ();
    void moteur ();
    void undoe (std::stack<std::shared_ptr<Action>>& actions);
    // Setters and Getters
  };

};

#endif
